#include <iostream>
#include <limits.h>
#include <queue>
#include <fstream>

using namespace std;
ifstream f("p1.in");
ofstream g("p1.out");
int n, m;
int graph[100][100], a, b, c;
bool bfs(int rGraph[100][100], int s, int t, int parent[])
{

  bool viz[100] = { 0 };

  queue<int> q;
  q.push(s);
  viz[s] = true;
  parent[s] = -1;
  while (!q.empty()) {
    int u = q.front();
    q.pop();

    for (int v = 0; v < n; v++) {
      if (viz[v] == false && rGraph[u][v] > 0) {

        if (v == t) {
          parent[v] = u;
          return true;
        }
        q.push(v);
        parent[v] = u;
        viz[v] = true;
      }
    }
  }

  return false;
}


int fordFulkerson(int graph[100][100], int s, int t)
{
  int u, v;

  int rGraph[100][100];

  for (u = 0; u < 100; u++)
    for (v = 0; v < 100; v++) {
      rGraph[u][v] = graph[u][v];
    }

  int parent[100];


  int max_flow = 0; 

  while (bfs(rGraph, s, t, parent)) {
    int path_flow = INT_MAX;
    for (v = t; v != s; v = parent[v]) {
      u = parent[v];
      path_flow = min(path_flow, rGraph[u][v]);
    }

    for (v = t; v != s; v = parent[v]) {
      u = parent[v];
      rGraph[u][v] -= path_flow;
      rGraph[v][u] += path_flow;
    }

    max_flow += path_flow;
  }


  return max_flow;
}


int main()
{


 
  f >> n >> m;
  for (int i = 1; i <= m; i++)
  {
    f >> a >> b >> c;
    graph[a][b] = c;
  }
  cout << fordFulkerson(graph, 0, n - 1);

  return 0;
}